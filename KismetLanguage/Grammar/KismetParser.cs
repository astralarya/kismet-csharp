//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from KismetParser.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace KismetLanguage.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public partial class KismetParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LPAREN=1, RPAREN=2, PLUS=3, MINUS=4, TIMES=5, DIV=6, IDIV=7, MOD=8, GT=9, 
		LT=10, GTE=11, LTE=12, EQ=13, NEQ=14, AND=15, OR=16, COMMA=17, POINT=18, 
		POW=19, ROLL=20, ROLL_FUNC=21, DIE=22, PI=23, EULER=24, I=25, VARIABLE=26, 
		NUMBER=27, WHITESPACE=28;
	public const int
		RULE_start = 0, RULE_expr = 1, RULE_multExpr = 2, RULE_powExpr = 3, RULE_signedAtom = 4, 
		RULE_atom = 5, RULE_number = 6, RULE_constant = 7, RULE_variable = 8, 
		RULE_function = 9, RULE_roll_func = 10, RULE_roll = 11, RULE_die = 12, 
		RULE_comparison = 13;
	public static readonly string[] ruleNames = {
		"start", "expr", "multExpr", "powExpr", "signedAtom", "atom", "number", 
		"constant", "variable", "function", "roll_func", "roll", "die", "comparison"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'//'", "'%'", "'>'", 
		"'<'", null, null, "'=='", null, "'&&'", "'||'", "','", "'.'", "'^'", 
		null, null, null, "'pi'", null, "'i'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "IDIV", "MOD", 
		"GT", "LT", "GTE", "LTE", "EQ", "NEQ", "AND", "OR", "COMMA", "POINT", 
		"POW", "ROLL", "ROLL_FUNC", "DIE", "PI", "EULER", "I", "VARIABLE", "NUMBER", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KismetParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static KismetParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KismetParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KismetParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKismetParserVisitor<TResult> typedVisitor = visitor as IKismetParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << PLUS) | (1L << MINUS) | (1L << ROLL) | (1L << ROLL_FUNC) | (1L << PI) | (1L << EULER) | (1L << I) | (1L << VARIABLE) | (1L << NUMBER))) != 0)) {
				{
				{
				State = 28; expr();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultExprContext[] multExpr() {
			return GetRuleContexts<MultExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultExprContext multExpr(int i) {
			return GetRuleContext<MultExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(KismetParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(KismetParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(KismetParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(KismetParser.MINUS, i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKismetParserVisitor<TResult> typedVisitor = visitor as IKismetParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_expr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; multExpr();
			State = 39;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 35;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 36; multExpr();
					}
					} 
				}
				State = 41;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PowExprContext[] powExpr() {
			return GetRuleContexts<PowExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PowExprContext powExpr(int i) {
			return GetRuleContext<PowExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TIMES() { return GetTokens(KismetParser.TIMES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES(int i) {
			return GetToken(KismetParser.TIMES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(KismetParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(KismetParser.DIV, i);
		}
		public MultExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKismetParserVisitor<TResult> typedVisitor = visitor as IKismetParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExprContext multExpr() {
		MultExprContext _localctx = new MultExprContext(Context, State);
		EnterRule(_localctx, 4, RULE_multExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; powExpr();
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TIMES || _la==DIV) {
				{
				{
				State = 43;
				_la = TokenStream.LA(1);
				if ( !(_la==TIMES || _la==DIV) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 44; powExpr();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SignedAtomContext[] signedAtom() {
			return GetRuleContexts<SignedAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedAtomContext signedAtom(int i) {
			return GetRuleContext<SignedAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] POW() { return GetTokens(KismetParser.POW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW(int i) {
			return GetToken(KismetParser.POW, i);
		}
		public PowExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_powExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKismetParserVisitor<TResult> typedVisitor = visitor as IKismetParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowExprContext powExpr() {
		PowExprContext _localctx = new PowExprContext(Context, State);
		EnterRule(_localctx, 6, RULE_powExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; signedAtom();
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POW) {
				{
				{
				State = 51; Match(POW);
				State = 52; signedAtom();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(KismetParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignedAtomContext signedAtom() {
			return GetRuleContext<SignedAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(KismetParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RollContext roll() {
			return GetRuleContext<RollContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public SignedAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKismetParserVisitor<TResult> typedVisitor = visitor as IKismetParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedAtomContext signedAtom() {
		SignedAtomContext _localctx = new SignedAtomContext(Context, State);
		EnterRule(_localctx, 8, RULE_signedAtom);
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58; Match(PLUS);
				State = 59; signedAtom();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 60; Match(MINUS);
				State = 61; signedAtom();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 62; function();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 63; roll();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 64; atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KismetParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KismetParser.RPAREN, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKismetParserVisitor<TResult> typedVisitor = visitor as IKismetParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 10, RULE_atom);
		try {
			State = 74;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 67; number();
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 68; variable();
				}
				break;
			case PI:
			case EULER:
			case I:
				EnterOuterAlt(_localctx, 3);
				{
				State = 69; constant();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 70; Match(LPAREN);
				State = 71; expr();
				State = 72; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(KismetParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKismetParserVisitor<TResult> typedVisitor = visitor as IKismetParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 12, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PI() { return GetToken(KismetParser.PI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EULER() { return GetToken(KismetParser.EULER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I() { return GetToken(KismetParser.I, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKismetParserVisitor<TResult> typedVisitor = visitor as IKismetParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 14, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PI) | (1L << EULER) | (1L << I))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(KismetParser.VARIABLE, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKismetParserVisitor<TResult> typedVisitor = visitor as IKismetParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 16, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Roll_funcContext roll_func() {
			return GetRuleContext<Roll_funcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(KismetParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(KismetParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KismetParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KismetParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKismetParserVisitor<TResult> typedVisitor = visitor as IKismetParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 18, RULE_function);
		int _la;
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82; roll_func();
				State = 83; Match(LPAREN);
				State = 84; expr();
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 85; Match(COMMA);
					State = 86; expr();
					}
					}
					State = 91;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 92; Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; variable();
				State = 95; Match(LPAREN);
				State = 96; expr();
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 97; Match(COMMA);
					State = 98; expr();
					}
					}
					State = 103;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 104; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Roll_funcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLL_FUNC() { return GetToken(KismetParser.ROLL_FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Roll_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roll_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKismetParserVisitor<TResult> typedVisitor = visitor as IKismetParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoll_func(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Roll_funcContext roll_func() {
		Roll_funcContext _localctx = new Roll_funcContext(Context, State);
		EnterRule(_localctx, 20, RULE_roll_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << PI) | (1L << EULER) | (1L << I) | (1L << VARIABLE) | (1L << NUMBER))) != 0)) {
				{
				State = 108; atom();
				}
			}

			State = 111; Match(ROLL_FUNC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RollContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLL() { return GetToken(KismetParser.ROLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public RollContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roll; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKismetParserVisitor<TResult> typedVisitor = visitor as IKismetParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RollContext roll() {
		RollContext _localctx = new RollContext(Context, State);
		EnterRule(_localctx, 22, RULE_roll);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << PI) | (1L << EULER) | (1L << I) | (1L << VARIABLE) | (1L << NUMBER))) != 0)) {
				{
				State = 113; atom();
				}
			}

			State = 116; Match(ROLL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DieContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIE() { return GetToken(KismetParser.DIE, 0); }
		public DieContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_die; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKismetParserVisitor<TResult> typedVisitor = visitor as IKismetParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDie(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DieContext die() {
		DieContext _localctx = new DieContext(Context, State);
		EnterRule(_localctx, 24, RULE_die);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(DIE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(KismetParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(KismetParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(KismetParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(KismetParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(KismetParser.LTE, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKismetParserVisitor<TResult> typedVisitor = visitor as IKismetParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 26, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << GTE) | (1L << LTE) | (1L << EQ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1E', '}', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\a', '\x2', ' ', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '#', '\v', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', '(', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '+', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', 
		'\x4', '\x30', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x33', '\v', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x38', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', ';', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '\x44', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'M', 
		'\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\a', '\v', 'Z', '\n', '\v', '\f', '\v', '\xE', '\v', ']', 
		'\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x66', '\n', '\v', '\f', 
		'\v', '\xE', '\v', 'i', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'm', '\n', '\v', '\x3', '\f', '\x5', '\f', 'p', '\n', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x5', '\r', 'u', '\n', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x2', '\x2', '\x10', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x2', '\x6', '\x3', '\x2', 
		'\x5', '\x6', '\x3', '\x2', '\a', '\b', '\x3', '\x2', '\x19', '\x1B', 
		'\x3', '\x2', '\v', '\xF', '\x2', '~', '\x2', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '$', '\x3', '\x2', '\x2', '\x2', '\x6', ',', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x34', '\x3', '\x2', '\x2', '\x2', '\n', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'L', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'N', '\x3', '\x2', '\x2', '\x2', '\x10', 'P', '\x3', '\x2', '\x2', '\x2', 
		'\x12', 'R', '\x3', '\x2', '\x2', '\x2', '\x14', 'l', '\x3', '\x2', '\x2', 
		'\x2', '\x16', 'o', '\x3', '\x2', '\x2', '\x2', '\x18', 't', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', 'x', '\x3', '\x2', '\x2', '\x2', '\x1C', 'z', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', ' ', '\x5', '\x4', '\x3', '\x2', '\x1F', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x3', '\x2', '\x2', '\x2', 
		'!', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\x3', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', 
		'\x2', '\x2', '$', ')', '\x5', '\x6', '\x4', '\x2', '%', '&', '\t', '\x2', 
		'\x2', '\x2', '&', '(', '\x5', '\x6', '\x4', '\x2', '\'', '%', '\x3', 
		'\x2', '\x2', '\x2', '(', '+', '\x3', '\x2', '\x2', '\x2', ')', '\'', 
		'\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', '*', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', 
		',', '\x31', '\x5', '\b', '\x5', '\x2', '-', '.', '\t', '\x3', '\x2', 
		'\x2', '.', '\x30', '\x5', '\b', '\x5', '\x2', '/', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x33', '\x3', '\x2', '\x2', '\x2', '\x31', '/', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\a', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x39', '\x5', '\n', '\x6', '\x2', '\x35', '\x36', 
		'\a', '\x15', '\x2', '\x2', '\x36', '\x38', '\x5', '\n', '\x6', '\x2', 
		'\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x38', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', ':', 
		'\x3', '\x2', '\x2', '\x2', ':', '\t', '\x3', '\x2', '\x2', '\x2', ';', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '<', '=', '\a', '\x5', '\x2', '\x2', 
		'=', '\x44', '\x5', '\n', '\x6', '\x2', '>', '?', '\a', '\x6', '\x2', 
		'\x2', '?', '\x44', '\x5', '\n', '\x6', '\x2', '@', '\x44', '\x5', '\x14', 
		'\v', '\x2', '\x41', '\x44', '\x5', '\x18', '\r', '\x2', '\x42', '\x44', 
		'\x5', '\f', '\a', '\x2', '\x43', '<', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'>', '\x3', '\x2', '\x2', '\x2', '\x43', '@', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\v', '\x3', '\x2', '\x2', '\x2', '\x45', 'M', '\x5', 
		'\xE', '\b', '\x2', '\x46', 'M', '\x5', '\x12', '\n', '\x2', 'G', 'M', 
		'\x5', '\x10', '\t', '\x2', 'H', 'I', '\a', '\x3', '\x2', '\x2', 'I', 
		'J', '\x5', '\x4', '\x3', '\x2', 'J', 'K', '\a', '\x4', '\x2', '\x2', 
		'K', 'M', '\x3', '\x2', '\x2', '\x2', 'L', '\x45', '\x3', '\x2', '\x2', 
		'\x2', 'L', '\x46', '\x3', '\x2', '\x2', '\x2', 'L', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'H', '\x3', '\x2', '\x2', '\x2', 'M', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'O', '\a', '\x1D', '\x2', '\x2', 'O', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\t', '\x4', '\x2', '\x2', 'Q', 
		'\x11', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\x1C', '\x2', '\x2', 
		'S', '\x13', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x5', '\x16', '\f', 
		'\x2', 'U', 'V', '\a', '\x3', '\x2', '\x2', 'V', '[', '\x5', '\x4', '\x3', 
		'\x2', 'W', 'X', '\a', '\x13', '\x2', '\x2', 'X', 'Z', '\x5', '\x4', '\x3', 
		'\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', ']', '\x3', '\x2', '\x2', 
		'\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', 
		'\x2', '\x2', '\\', '^', '\x3', '\x2', '\x2', '\x2', ']', '[', '\x3', 
		'\x2', '\x2', '\x2', '^', '_', '\a', '\x4', '\x2', '\x2', '_', 'm', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x61', '\x5', '\x12', '\n', '\x2', '\x61', 
		'\x62', '\a', '\x3', '\x2', '\x2', '\x62', 'g', '\x5', '\x4', '\x3', '\x2', 
		'\x63', '\x64', '\a', '\x13', '\x2', '\x2', '\x64', '\x66', '\x5', '\x4', 
		'\x3', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x66', 'i', 
		'\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', 
		'h', '\x3', '\x2', '\x2', '\x2', 'h', 'j', '\x3', '\x2', '\x2', '\x2', 
		'i', 'g', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', '\x4', '\x2', '\x2', 
		'k', 'm', '\x3', '\x2', '\x2', '\x2', 'l', 'T', '\x3', '\x2', '\x2', '\x2', 
		'l', '`', '\x3', '\x2', '\x2', '\x2', 'm', '\x15', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'p', '\x5', '\f', '\a', '\x2', 'o', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\a', '\x17', '\x2', '\x2', 'r', '\x17', '\x3', '\x2', 
		'\x2', '\x2', 's', 'u', '\x5', '\f', '\a', '\x2', 't', 's', '\x3', '\x2', 
		'\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'w', '\a', '\x16', '\x2', '\x2', 'w', '\x19', '\x3', 
		'\x2', '\x2', '\x2', 'x', 'y', '\a', '\x18', '\x2', '\x2', 'y', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', 'z', '{', '\t', '\x5', '\x2', '\x2', '{', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\r', '!', ')', '\x31', '\x39', '\x43', 
		'L', '[', 'g', 'l', 'o', 't',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace KismetLanguage.Grammar
